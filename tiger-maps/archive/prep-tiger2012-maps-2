#! /usr/bin/perl -w
    eval 'exec /usr/bin/perl -S $0 ${1+"$@"}'
        if 0; #$running_under_some_shell

use strict;
use File::Find ();
use File::Basename;

# Set the variable $File::Find::dont_use_nlink if you're using AFS,
# since AFS cheats.

# for the convenience of &wanted calls, including -eval statements:
use vars qw/*name *dir *prune/;
*name   = *File::Find::name;
*dir    = *File::Find::dir;
*prune  = *File::Find::prune;

my $VERBOSE = 0;
my $DRYRUN  = 0;

my @shpt;
sub wanted {
    /^.*\.shp\z/s && push @shpt, $name;
}

sub mysystem {
    my $cmd = shift;

    my $ret = 0;
    print "$cmd\n" if $VERBOSE || $DRYRUN;
    $ret = system($cmd) unless $DRYRUN;
    return $ret;
}

my $tdir = '/u/data/tiger2012-maps';
my $sdir = '/u/srcdata/TIGER2012';

my @lyrs = qw( STATE COUNTY COUSUB PLACE AREALM MIL AREAWATER LINEARWATER PRIMARYROADS PRISECROADS RAILS ROADS POINTLM );

## need an option to REPROJECT all the data
## but might just do this after the fact on the whole directory tree

for (my $i=0; $i<@lyrs; $i++) {
    my $x = $lyrs[$i];
    next if $x =~ m/^(PRISECROADS)$/;

    my @tidx = ();
    @shpt = ();
    # Traverse desired filesystems
    File::Find::find({wanted => \&wanted}, "$tdir/$x");

    if ($x eq 'STATE') {
        # create a centroid point layer for labels at 55M and 28M scales
    }
    elsif ($x eq 'COUNTY') {
    }
    elsif ($x eq 'COUSUB') {
    }
    elsif ($x eq 'PLACE') {
    }
    elsif ($x eq 'AREALM') {
        for my $y (sort @shpt) {
            my $d = $y;
            $d =~ s/AREALM/AREALM-L/;
            my $dd = dirname($d);
            mysystem("mkdir -p '$dd'") if ! -d $dd;
            mysystem("ogr2ogr -where 'AWATER>9999 OR ALAND>9999' -simplify 0.0001 -f 'ESRI Shapefile' '$d' '$y' ");
            mysystem("shptree '$d' ");
            push @tidx, $d;
        }
        open(OUT, ">$tdir/tidx-AREALM-L.in") || die "Failed to create '$tdir/tidx-AREALM-L.in' : $!\n";
        print OUT join("\n", @tidx), "\n";
        close(OUT);
        mysystem("(cd $tdir; tile4ms tidx-AREALM-L.in tidx-AREALM-L)");
        mysystem("shptree $tdir/tidx-AREALM-L.shp");
    }
    elsif ($x eq 'MIL') {
    }
    elsif ($x eq 'AREAWATER') {
        # extract all large water polygons and simplify them
        # into an AREAWATER-L directory tree for scales 7M, 3M, 2M, 867K
        for my $y (sort @shpt) {
            my $d = $y;
            $d =~ s/AREAWATER/AREAWATER-L/;
            my $dd = dirname($d);
            mysystem("mkdir -p '$dd'") if ! -d $dd;
            mysystem("ogr2ogr -where 'AWATER>99999' -simplify 0.0005 -f 'ESRI Shapefile' '$d' '$y' ");
            mysystem("shptree '$d' ");
            $d =~ s/^$tdir\///;
            push @tidx, $d;
        }
        open(OUT, ">$tdir/tidx-AREAWATER-L.in") || die "Failed to create '$tdir/tidx-AREAWATER-L.in' : $!\n";
        print OUT join("\n", @tidx), "\n";
        close(OUT);
        mysystem("(cd $tdir; tile4ms tidx-AREAWATER-L.in tidx-AREAWATER-L)");
        mysystem("shptree $tdir/tidx-AREAWATER-L.shp");
    }
    elsif ($x eq 'LINEARWATER') {
    }
    elsif ($x eq 'PRIMARYROADS') {
        for my $y (sort @shpt) {
            $y =~ s/\.shp$//;
            mysystem("ogr2ogr -simplify 0.0001 -f 'ESRI Shapefile' '$y-s.shp' '$y.shp' ");
            mysystem("shptree '$y-s.shp' ");
        }
    }
    elsif ($x eq 'PRISECROADS') {
        for my $y (sort @shpt) {
            my $d = $y;
            $d =~ s/PRISECROADS/PRISECROADS-S/;
            my $dd = dirname($d);
            mysystem("mkdir -p '$dd'") if ! -d $dd;
            mysystem("ogr2ogr -simplify 0.0001 -f 'ESRI Shapefile' a.shp '$y' ");
            $d =~ s/\.shp$//;
            mysystem("doTgrRoads a '$d'");
            mysystem("shptree '$d' ");
            mysystem("rm a.*");
            $d =~ s/^$tdir\///;
            push @tidx, "$d.shp";
        }
        open(OUT, ">$tdir/tidx-PRISECROADS-S.in") || die "Failed to create '$tdir/tidx-PRISECROADS-S.in' : $!\n";
        print OUT join("\n", @tidx), "\n";
        close(OUT);
        mysystem("(cd $tdir; tile4ms tidx-PRISECROADS-S.in tidx-PRISECROADS-S)");
        mysystem("shptree '$tdir/tidx-PRISECROADS-S.shp' ");
    }
    elsif ($x eq 'RAILS') {
    }
    elsif ($x eq 'ROADS') {
        # separate and sort by MTFCC decending
        # 1. S1100 S1200
        # 2. S1400 S1630 S1640 S1730 S1740
        # 3. S1500 S1710 S1720 S1750 S1780 S1820 S1830
        for my $y (sort @shpt) {
            $y =~ s/\.shp$//;
            mysystem("doTgrRoads '$y' a");
            mysystem("shprename a '$y' | sh");
            #mysystem("sortshp '$y' a MTFCC descending");
            #mysystem("shprename a '$y' | sh");
            #mysystem("shptree '$y'");
        }
    }
    elsif ($x eq 'POINTLM') {
    }

}
exit;


