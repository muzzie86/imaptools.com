#! /usr/bin/perl -w
    eval 'exec /usr/bin/perl -S $0 ${1+"$@"}'
        if 0; #$running_under_some_shell

use strict;
use File::Find ();
use File::Basename;

# Set the variable $File::Find::dont_use_nlink if you're using AFS,
# since AFS cheats.

my $style = 'US';
if (@ARGV && $ARGV[0] =~ /^-(us|ca|euro)$/) {
    $style = uc($1);
    shift @ARGV;
}
my $utf8 = '';
if (@ARGV && $ARGV[0] =~ /^-utf-?8$/i) {
    $utf8 = '-u';
    shift @ARGV;
}
my $extra = '';
if (@ARGV && $ARGV[0] =~ /^-x$/) {
    $extra = '-x';
    shift @ARGV;
}
my $city = '';
if (@ARGV && $ARGV[0] =~ /^-c$/) {
    $city = '-c';
    shift @ARGV;
}
my $sdir = shift @ARGV || Usage();
my $ddir = shift @ARGV || Usage();


# for the convenience of &wanted calls, including -eval statements:
use vars qw/*name *dir *prune/;
*name   = *File::Find::name;
*dir    = *File::Find::dir;
*prune  = *File::Find::prune;

sub wanted;
my @files = ();


# Traverse desired filesystems
File::Find::find({wanted => \&wanted}, $sdir);
process();

exit;

sub Usage {
    die "Usage: process-nt-maps [-us|-ca|-euro] [-utf8] [-x] [-c] sdir ddir | sh\n" .
        "       -us    US styling (default)\n" .
        "       -ca    Canadian styling\n" .
        "       -euro  European styling\n" .
        "       -utf8  Data is in utf8, otherwise assume latin1\n" .
        "       -x     Add extra columns for speed and house numbers\n" .
        "       -c     Use alternate pop classifier for NamedPlc data\n" .
        "NOTE: order of options is important.\n";
}

sub wanted {
    /^.*\.shp\z/s &&
    push @files, $name;
}

sub process {

    while (my $f = shift @files) {
        my($name, $dir, $suf) = fileparse($f, qr(\.shp));
        my $odir = $dir;
        $odir =~ s/^$sdir/$ddir/;
        print "mkdir -p $odir\n" if ! -d $odir;
        if ($name =~ m/NamedPlc/i) {
            print "doNtMisc $utf8 $city $name $f tmp-${$}$suf\n";
            if ($city eq '') {
                print "sortshp tmp-$$ $odir$name POP ascending\n";
            } else {
                print "sortshp tmp-$$ $odir$name POP descending\n";
            }
            print "rm tmp-$$.*\n";
        }
        elsif ($name =~ m/Hamlet/i) {
            print "doNtMisc $utf8 $city $name $f $odir$name$suf\n";
        }
        elsif ($name =~ m/CartoCountry/i) {
            print "cp $dir/$name.* $odir/.\n";
        }
        elsif ($name =~ m/WaterSeg/i) {
            print "doNtMisc $utf8 $name $f $odir$name$suf\n";
        }
        elsif ($name =~ m/RailRds/i) {
            print "doNtMisc $utf8 $name $f $odir$name$suf\n";
            print "dbflength -f LENGTH $odir$name.dbf a$$.dbf\n";
            print "mv a$$.dbf $odir$name.dbf\n";
        }
        elsif ($name =~ m/Adminbndy3|AdminBndy4|Adminbndy5|Islands|Oceans/i) {
            # TODO: add logic to figure out ccode
            my $ccode = $style;
            print "doNtPolygons $utf8 $name $ccode $f $odir$name$suf\n";
        }
        elsif ($name =~ m/LandUse[AB]|Landmark|WaterPoly/i) {
            # TODO: add logic to figure out ccode
            my $ccode = $style;
            print "doNtPolygons $utf8 -a 2 $name $ccode $f $odir$name$suf\n";
        }
        elsif ($name =~ m/\bStreets/i) {
            # TODO: add logic to select style US|CA|EURO
            print "doNtStreets $utf8 $extra $style $f $odir$name$suf\n";
            print "shpgrep $odir$name $odir$name-Maj STYLE 1 2 3 9 19 11 12 13 21 22 23 31 32 33\n";
            print "shpgrep $odir$name $odir$name-Min STYLE 4 5 6 14 15 16 24 25 26 34 35 36 99\n";
            print "shpgrep $odir$name $odir$name-Tun EXTRA T\n";
        }
        elsif ($name =~ m/(Maj|Sec)Hwys$/i) {
            # TODO: add logic to select style US|CA|EURO
            print "doNtHwys $utf8 $style $f $odir$name$suf\n";
        }
        else {
            #print "## SKIPPING $f\n";
        }
    }

}
